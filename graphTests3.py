from __future__ import print_function
from graph import Graph
import numpy as np

""" Graphs for testing sum product implementation
"""

def checkEq(a,b):
    epsilon = 10**-6
    return abs(a-b) < epsilon

def makeToyGraph():
    """ Simple graph encoding, basic testing
        2 vars, 2 facs
        f_a, f_ba - p(a)p(a|b)
        factors functions are a little funny but it works
    """
    G = Graph()

    a = G.addVarNode('a', 2)
    b = G.addVarNode('b', 2)
    c = G.addVarNode('c', 2)

    F1 = np.array([[1, 2], [2, 4]])
    G.addFacNode(F1, a, b)

    F2 = np.array([[2, 2], [1, 4]])
    G.addFacNode(F2, b, c)

    return G

def testToyGraph():
    """ Actual test case
    """

    G = makeToyGraph()
    marg = G.marginals()
    brute = G.bruteForce()

    # check the results
    # want to verify incoming messages
    # if vars are correct then factors must be as well
    a = G.var['a'].incoming
    print('a01', a[0][0])
    print('a02', a[0][1])

    b = G.var['b'].incoming
    print('b01', b[0][0])
    print('b02', b[0][1])
    print('b03', b[1][0])
    print('b04', b[1][1])

    c = G.var['c'].incoming
    print('c01', c[0][0])
    print('c02', c[0][1])
	
    # check the marginals
    am = marg['a']
    print('a1', am[0])
    print('a2', am[1])

    bm = marg['b']
    print('b1', bm[0])
    print('b2', bm[1])

    cm = marg['c']
    print('c1', cm[0])
    print('c2', cm[1])
	
    print("All tests passed!")


def makeTestGraph2():

    G = Graph()
    # a is tough user, b is nice user and c is average user
    a = G.addVarNode('a', 5)
    b = G.addVarNode('b', 5)
    c = G.addVarNode('c', 5)
    # p1 is a good restaurant, p2 is a bad restaurant, p3 is average restaurant
	
    p1 = np.array([[[  3.68174110e-04,   3.68174110e-04,   1.84087055e-03,
           1.73041831e-02,   2.43363086e-01],
        [  6.21293810e-04,   6.21293810e-04,   3.10646905e-03,
           2.92008091e-02,   4.10675208e-01],
        [  3.26754522e-03,   3.26754522e-03,   1.63377261e-02,
           1.53574625e-01,   2.15984739e+00],
        [  9.59553773e-03,   9.59553773e-03,   4.79776886e-02,
           4.50990273e-01,   6.34265044e+00],
        [  9.45747244e-03,   9.45747244e-03,   4.72873622e-02,
           4.44501205e-01,   6.25138928e+00]],

       [[  4.41808931e-04,   4.41808931e-04,   2.20904466e-03,
           2.07650198e-02,   2.92035704e-01],
        [  7.45552572e-04,   7.45552572e-04,   3.72776286e-03,
           3.50409709e-02,   4.92810250e-01],
        [  3.92105427e-03,   3.92105427e-03,   1.96052713e-02,
           1.84289551e-01,   2.59181687e+00],
        [  1.15146453e-02,   1.15146453e-02,   5.75732264e-02,
           5.41188328e-01,   7.61118053e+00],
        [  1.13489669e-02,   1.13489669e-02,   5.67448346e-02,
           5.33401446e-01,   7.50166714e+00]],

       [[  7.36348219e-05,   7.36348219e-05,   3.68174110e-04,
           3.46083663e-03,   4.86726173e-02],
        [  1.24258762e-04,   1.24258762e-04,   6.21293810e-04,
           5.84016181e-03,   8.21350417e-02],
        [  6.53509044e-04,   6.53509044e-04,   3.26754522e-03,
           3.07149251e-02,   4.31969478e-01],
        [  1.91910755e-03,   1.91910755e-03,   9.59553773e-03,
           9.01980547e-02,   1.26853009e+00],
        [  1.89149449e-03,   1.89149449e-03,   9.45747244e-03,
           8.89002409e-02,   1.25027786e+00]],

       [[  5.15443753e-04,   5.15443753e-04,   2.57721877e-03,
           2.42258564e-02,   3.40708321e-01],
        [  8.69811334e-04,   8.69811334e-04,   4.34905667e-03,
           4.08811327e-02,   5.74945292e-01],
        [  4.57456331e-03,   4.57456331e-03,   2.28728166e-02,
           2.15004476e-01,   3.02378635e+00],
        [  1.34337528e-02,   1.34337528e-02,   6.71687641e-02,
           6.31386383e-01,   8.87971062e+00],
        [  1.32404614e-02,   1.32404614e-02,   6.62023071e-02,
           6.22301686e-01,   8.75194499e+00]],

       [[  8.09983041e-04,   8.09983041e-04,   4.04991520e-03,
           3.80692029e-02,   5.35398790e-01],
        [  1.36684638e-03,   1.36684638e-03,   6.83423191e-03,
           6.42417799e-02,   9.03485458e-01],
        [  7.18859949e-03,   7.18859949e-03,   3.59429974e-02,
           3.37864176e-01,   4.75166426e+00],
        [  2.11101830e-02,   2.11101830e-02,   1.05550915e-01,
           9.92178601e-01,   1.39538310e+01],
        [  2.08064394e-02,   2.08064394e-02,   1.04032197e-01,
           9.77902650e-01,   1.37530564e+01]]])	
	
	
	
    '''
    p1 = np.array([[[0.00036817,0.00036817,0.0018409,0.017304,0.24336],[0.00062129,0.00062129,0.0031065,0.029201,0.41068],[0.0032675,0.0032675,0.016338,0.15357,2.1598],[0.0094575,0.0094575,0.047287,0.4445,6.2514],[0.0095955,0.0095955,0.047978,0.45099,6.3427]],
    [[0.00044181,0.00044181,0.002209,0.020765,0.29204],[0.00074555,0.00074555,0.0037278,0.035041,0.49281],[0.0039211,0.0039211,0.019605,0.18429,2.5918],[0.011349,0.011349,0.056745,0.5334,7.5017],[0.011515,0.011515,0.057573,0.54119,7.6112]],
    [[7.3635e-05,7.3635e-05,0.00036817,0.0034608,0.048673],[0.00012426,0.00012426,0.00062129,0.0058402,0.082135],[0.00065351,0.00065351,0.0032675,0.030715,0.43197],[0.0018915,0.0018915,0.0094575,0.0889,1.2503],[0.0019191,0.0019191,0.0095955,0.090198,1.2685]],
    [[0.00051544,0.00051544,0.0025772,0.024226,0.34071],[0.00086981,0.00086981,0.0043491,0.040881,0.57495],[0.0045746,0.0045746,0.022873,0.215,3.0238],[0.01324,0.01324,0.066202,0.6223,8.7519],[0.013434,0.013434,0.067169,0.63139,8.8797]],
    [[0.00080998,0.00080998,0.0040499,0.038069,0.5354],[0.0013668,0.0013668,0.0068342,0.064242,0.90349],[0.0071886,0.0071886,0.035943,0.33786,4.7517],[0.020806,0.020806,0.10403,0.9779,13.7531],[0.02111,0.02111,0.10555,0.99218,13.9538]]])
    '''
    G.addFacNode(p1, a, b, c)

    p2 = np.array([[[  2.11528892e+00,   1.05764446e+00,   4.23057784e+00,
           1.48070224e+01,   1.05764446e+01],
        [  1.30012880e+00,   6.50064399e-01,   2.60025760e+00,
           9.10090159e+00,   6.50064399e+00],
        [  9.18344945e-01,   4.59172472e-01,   1.83668989e+00,
           6.42841461e+00,   4.59172472e+00],
        [  3.40509923e-01,   1.70254962e-01,   6.81019847e-01,
           2.38356946e+00,   1.70254962e+00],
        [  1.13503308e-01,   5.67516539e-02,   2.27006616e-01,
           7.94523154e-01,   5.67516539e-01]],

       [[  5.85079913e-01,   2.92539957e-01,   1.17015983e+00,
           4.09555939e+00,   2.92539957e+00],
        [  3.59610093e-01,   1.79805047e-01,   7.19220186e-01,
           2.51727065e+00,   1.79805047e+00],
        [  2.54010304e-01,   1.27005152e-01,   5.08020608e-01,
           1.77807213e+00,   1.27005152e+00],
        [  9.41835958e-02,   4.70917979e-02,   1.88367192e-01,
           6.59285171e-01,   4.70917979e-01],
        [  3.13945319e-02,   1.56972660e-02,   6.27890639e-02,
           2.19761724e-01,   1.56972660e-01]],

       [[  7.50102453e-02,   3.75051227e-02,   1.50020491e-01,
           5.25071717e-01,   3.75051227e-01],
        [  4.61038581e-02,   2.30519290e-02,   9.22077162e-02,
           3.22727007e-01,   2.30519290e-01],
        [  3.25654236e-02,   1.62827118e-02,   6.51308471e-02,
           2.27957965e-01,   1.62827118e-01],
        [  1.20748200e-02,   6.03740999e-03,   2.41496400e-02,
           8.45237398e-02,   6.03740999e-02],
        [  4.02493999e-03,   2.01247000e-03,   8.04987998e-03,
           2.81745799e-02,   2.01247000e-02]],

       [[  6.00081962e-02,   3.00040981e-02,   1.20016392e-01,
           4.20057374e-01,   3.00040981e-01],
        [  3.68830865e-02,   1.84415432e-02,   7.37661729e-02,
           2.58181605e-01,   1.84415432e-01],
        [  2.60523389e-02,   1.30261694e-02,   5.21046777e-02,
           1.82366372e-01,   1.30261694e-01],
        [  9.65985598e-03,   4.82992799e-03,   1.93197120e-02,
           6.76189919e-02,   4.82992799e-02],
        [  3.21995199e-03,   1.60997600e-03,   6.43990399e-03,
           2.25396640e-02,   1.60997600e-02]],

       [[  1.50020491e-02,   7.50102453e-03,   3.00040981e-02,
           1.05014343e-01,   7.50102453e-02],
        [  9.22077162e-03,   4.61038581e-03,   1.84415432e-02,
           6.45454013e-02,   4.61038581e-02],
        [  6.51308471e-03,   3.25654236e-03,   1.30261694e-02,
           4.55915930e-02,   3.25654236e-02],
        [  2.41496400e-03,   1.20748200e-03,   4.82992799e-03,
           1.69047480e-02,   1.20748200e-02],
        [  8.04987998e-04,   4.02493999e-04,   1.60997600e-03,
           5.63491599e-03,   4.02493999e-03]]])	
    '''
    p2= np.array([[[2.1153,1.0576,4.2306,14.807,10.5764],[1.3001,0.65006,2.6003,9.1009,6.5006],[0.91834,0.45917,1.8367,6.4284,4.5917],[0.34051,0.17025,0.68102,2.3836,1.7025],[0.1135,0.056752,0.22701,0.79452,0.56752]],
    [[0.58508,0.29254,1.1702,4.0956,2.9254],[0.35961,0.17981,0.71922,2.5173,1.7981],[0.25401,0.12701,0.50802,1.7781,1.2701],[0.094184,0.047092,0.18837,0.65929,0.47092],[0.031395,0.015697,0.062789,0.21976,0.15697]],
    [[0.07501,0.037505,0.15002,0.52507,0.37505],[0.046104,0.023052,0.092208,0.32273,0.23052],[0.032565,0.016283,0.065131,0.22796,0.16283],[0.012075,0.0060374,0.02415,0.084524,0.060374],[0.0040249,0.0020125,0.0080499,0.028175,0.020125]],
    [[0.060008,0.030004,0.12002,0.42006,0.30004],[0.036883,0.018442,0.073766,0.25818,0.18442],[0.026052,0.013026,0.052105,0.18237,0.13026],[0.0096599,0.0048299,0.01932,0.067619,0.048299],[0.00322,0.00161,0.0064399,0.02254,0.0161]],
    [[0.015002,0.007501,0.030004,0.10501,0.07501],[0.0092208,0.0046104,0.018442,0.064545,0.046104],[0.0065131,0.0032565,0.013026,0.045592,0.032565],[0.002415,0.0012075,0.0048299,0.016905,0.012075],[0.00080499,0.00040249,0.00161,0.0056349,0.0040249]]])
    '''
    G.addFacNode(p2, a, b, c)

    p3 = np.array([[[  1.30408095e-02,   3.12979428e-02,   1.46057067e-01,
           1.13976675e+00,   2.22476210e+00],
        [  2.51483309e-02,   6.03559942e-02,   2.81661306e-01,
           2.19796412e+00,   4.29030526e+00],
        [  4.46464852e-02,   1.07151564e-01,   5.00040634e-01,
           3.90210281e+00,   7.61669037e+00],
        [  3.45568840e-02,   8.29365216e-02,   3.87037101e-01,
           3.02027166e+00,   5.89540441e+00],
        [  7.74376890e-03,   1.85850454e-02,   8.67302117e-02,
           6.76805402e-01,   1.32108697e+00]],

       [[  1.56013338e-02,   3.74432010e-02,   1.74734938e-01,
           1.36355657e+00,   2.66158754e+00],
        [  3.00861311e-02,   7.22067145e-02,   3.36964668e-01,
           2.62952785e+00,   5.13269396e+00],
        [  5.34126900e-02,   1.28190456e-01,   5.98222129e-01,
           4.66826911e+00,   9.11220492e+00],
        [  4.13420256e-02,   9.92208615e-02,   4.63030687e-01,
           3.61329304e+00,   7.05294957e+00],
        [  9.26423494e-03,   2.22341639e-02,   1.03759431e-01,
           8.09694134e-01,   1.58047848e+00]],

       [[  5.77606632e-03,   1.38625592e-02,   6.46919427e-02,
           5.04828196e-01,   9.85396913e-01],
        [  1.11387584e-02,   2.67330203e-02,   1.24754095e-01,
           9.73527488e-01,   1.90027219e+00],
        [  1.97749272e-02,   4.74598254e-02,   2.21479185e-01,
           1.72832864e+00,   3.37360259e+00],
        [  1.53060171e-02,   3.67344411e-02,   1.71427392e-01,
           1.33774590e+00,   2.61120652e+00],
        [  3.42988851e-03,   8.23173242e-03,   3.84147513e-02,
           2.99772256e-01,   5.85138980e-01]],

       [[  3.27508915e-03,   7.86021396e-03,   3.66809985e-02,
           2.86242792e-01,   5.58730209e-01],
        [  6.31579087e-03,   1.51578981e-02,   7.07368578e-02,
           5.52000122e-01,   1.07747392e+00],
        [  1.12125876e-02,   2.69102103e-02,   1.25580981e-01,
           9.79980157e-01,   1.91286745e+00],
        [  8.67866950e-03,   2.08288068e-02,   9.72010984e-02,
           7.58515714e-01,   1.48058102e+00],
        [  1.94478214e-03,   4.66747715e-03,   2.17815600e-02,
           1.69973959e-01,   3.31779834e-01]],

       [[  5.35923679e-04,   1.28621683e-03,   6.00234520e-03,
           4.68397295e-02,   9.14285796e-02],
        [  1.03349305e-03,   2.48038332e-03,   1.15751222e-02,
           9.03272927e-02,   1.76313915e-01],
        [  1.83478706e-03,   4.40348895e-03,   2.05496151e-02,
           1.60360389e-01,   3.13014673e-01],
        [  1.42014592e-03,   3.40835020e-03,   1.59056343e-02,
           1.24120753e-01,   2.42276894e-01],
        [  3.18237078e-04,   7.63768987e-04,   3.56425527e-03,
           2.78139206e-02,   5.42912455e-02]]])	
    '''
    p3= np.array([[[0.013041,0.031298,0.14606,1.1398,2.2248],[0.025148,0.060356,0.28166,2.198,4.2903],[0.044646,0.10715,0.50004,3.9021,7.6167],[0.034557,0.082937,0.38704,3.0203,5.8954],[0.0077438,0.018585,0.08673,0.67681,1.3211]],
    [[0.015601,0.037443,0.17473,1.3636,2.6616],[0.030086,0.072207,0.33696,2.6295,5.1327],[0.053413,0.12819,0.59822,4.6683,9.1122],[0.041342,0.099221,0.46303,3.6133,7.0529],[0.0092642,0.022234,0.10376,0.80969,1.5805]],
    [[0.0057761,0.013863,0.064692,0.50483,0.9854],[0.011139,0.026733,0.12475,0.97353,1.9003],[0.019775,0.04746,0.22148,1.7283,3.3736],[0.015306,0.036734,0.17143,1.3377,2.6112],[0.0034299,0.0082317,0.038415,0.29977,0.58514]],
    [[0.0032751,0.0078602,0.036681,0.28624,0.55873],[0.0063158,0.015158,0.070737,0.552,1.0775],[0.011213,0.02691,0.12558,0.97998,1.9129],[0.0086787,0.020829,0.097201,0.75852,1.4806],[0.0019448,0.0046675,0.021782,0.16997,0.33178]],
    [[0.00053592,0.0012862,0.0060023,0.04684,0.091429],[0.0010335,0.0024804,0.011575,0.090327,0.17631],[0.0018348,0.0044035,0.02055,0.16036,0.31301],[0.0014201,0.0034084,0.015906,0.12412,0.24228],[0.00031824,0.00076377,0.0035643,0.027814,0.054291]]])
    '''
    G.addFacNode(p3, a, b, c)

    return G

def testTestGraph2():
    """ Automated test case
    """
    G = makeTestGraph2()
    marg = G.marginals()
    brute = G.bruteForce()

    # check the marginals
    am = marg['a']
    print('a1', am[0])
    print('a2', am[1])
    print('a3', am[2])
    print('a4', am[3])
    print('a5', am[4])

    bm = marg['b']
    print('b1', bm[0])
    print('b2', bm[1])
    print('b3', bm[2])
    print('b4', bm[3])
    print('b5', bm[4])

    cm = marg['c']
    print('c1', cm[0])
    print('c2', cm[1])
    print('c3', cm[2])
    print('c4', cm[3])
    print('c5', cm[4])
	
    print("All tests passed!")	
	
# standard run of test cases
testToyGraph()
testTestGraph2()